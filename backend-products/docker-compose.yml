#version: '3.9'

# Aseugra tener los volumenes en el host
# mkdir ..\data\test\var\lib\mysql
# mkdir ..\data\dev\var\lib\mysql
# -----------------------------
# Cambia el perfil en .env:
# -----------------------------
# Para dev:
# SPRING_PROFILES_ACTIVE=dev
# Para test:
# SPRING_PROFILES_ACTIVE=test
#
# Levanta los contenedores:
# docker compose --profile dev up -d --build
# docker compose --profile test up -d --build
#
# Verifica los logs:
# docker logs -f springboot_container
# -----------------------------
#
# ✅ Características incluidas
#
# - Dev: Hot reload con mvn spring-boot:run, código montado como volumen
# - Prod: Ejecuta JAR precompilado, más liviano
# - MySQL: Volúmenes separados para dev y test, persistencia de datos
# - Perfiles: Controlados por .env y Docker Compose profiles
# - Puertos: Dev y test pueden configurarse para no colisionar

#version: '3.9'

services:

  # -----------------------------
  # MySQL Dev
  # -----------------------------
  db_dev:
    image: mysql:8.0
    container_name: mysql_dev_container
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ${DEV_DB_NAME}
      MYSQL_USER: ${DEV_DB_USER}
      MYSQL_PASSWORD: ${DEV_DB_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - dev_volume:/var/lib/mysql
    profiles:
      - dev

  # -----------------------------
  # MySQL Test
  # -----------------------------
  db_test:
    image: mysql:8.0
    container_name: mysql_test_container
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ${TEST_DB_NAME}
      MYSQL_USER: ${TEST_DB_USER}
      MYSQL_PASSWORD: ${TEST_DB_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - test_volume:/var/lib/mysql
    profiles:
      - test

  # -----------------------------
  # Spring Boot App para Dev
  # -----------------------------
  springboot-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: dev
      target: dev
    container_name: springboot_container
    depends_on:
      - db_dev
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db_dev:3306/${DEV_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DEV_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DEV_DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: dev
    ports:
      - "8082:8080"
    volumes:
      - ./src:/app/src
      - ./pom.xml:/app/pom.xml
    profiles:
      - dev

  # -----------------------------
  # Spring Boot App para Test Solo (ejecuta solo puruebas)
  # -----------------------------

  springboot-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test-only
    container_name: springboot_test_container
    volumes:
      - ./src:/app/src
      - ./pom.xml:/app/pom.xml
    profiles:
      - test

  # -----------------------------
  # Spring Boot App para Test
  # -----------------------------
  springboot-app-test:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: test
      target: test
    container_name: springboot_container_test
    depends_on:
      - db_test
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db_test:3306/${TEST_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${TEST_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${TEST_DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: test
    ports:
      - "8083:8080"
    volumes:
      - ./src:/app/src
      - ./pom.xml:/app/pom.xml
    profiles:
      - test

#  phpmyadmin:
#    image: phpmyadmin/phpmyadmin:5.2
#    container_name: phpmyadmin_container
#    restart: always
#    environment:
#      PMA_HOST: ${SPRING_PROFILES_ACTIVE}_db       # apunta al servicio 'db'
#      PMA_PORT: 3306
#      PMA_USER: ${SPRING_PROFILES_ACTIVE}_user
#      PMA_PASSWORD: ${SPRING_PROFILES_ACTIVE}_password
#    ports:
#      - "8081:80"        # http://localhost:8081 para acceder a phpMyAdmin
#    depends_on:
#      - db
#      - dev

# volumes en Docker Compose sirve para definir volúmenes “bind” locales, es decir,
# carpetas del host (tu máquina) que se montan dentro del contenedor para persistencia de datos
#
# - test_volume:
#   Es el nombre interno del volumen que usarás en los servicios Docker.
#
# - driver: local
#   Indica que se usa almacenamiento local del host.
#
#  - driver_opts
#   - type: none → no es un sistema de archivos especial, simplemente usa la carpeta del host.
#   - device: ./data/test/mysql → ruta de la carpeta en tu proyecto donde se guardarán los datos de MySQL.
#   - o: bind → indica que es un bind mount, es decir, Docker monta directamente esa carpeta del host dentro del contenedor.
volumes:
  test_volume:
    driver: local
    driver_opts:
      type: none
      device: ../data/test/var/lib/mysql
      o: bind
  dev_volume:
    driver: local
    driver_opts:
      type: none
      device: ../data/dev/var/lib/mysql
      o: bind
